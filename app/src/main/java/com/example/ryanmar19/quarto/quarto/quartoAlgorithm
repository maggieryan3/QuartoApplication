package com.example.ryanmar19.quarto;

   ORIGINAL OUTLINE

   boolean colorEqual = true;
   boolean sizeEqual = true;
   boolean solidityEqual = true;
   boolean shapeEqual = true;

   //checking columns
   for(int col = 0; col<4; col++)
   {
       for (int row = 0; row < 3; row++) {
           //color
           if (boardPieces[col][row].color != boardPieces[col][row + 1].color) {
               colorEqual = false;
           }
           //size
           //solidity
           //shape
       }
   }

   //checking rows
   for(int row = 0; row<4; row++)
   {
       for (int col = 0; col<3; col++) {
           //color
           if (boardPieces[col][row].color != boardPieces[col+1][row].color) {
               colorEqual = false;
           }
           //size
           //solidity
           //shape
       }
   }

   //checking cross - top left to bottom right
   for(int col = 0; col<3; col++){
       for (int row = 0; row<3; row++) {
           if (boardPieces[col][row].color != boardPieces[col+1][row+1].color) {
               colorEqual = false;
           }
           //size
           //solidity
           //shape
       }
   }

   //checking cross - bottom left to top right
   for(int col = 0; col<3; col++){
       for (int row = 4; row>0; row--) {
           if (boardPieces[col][row].color != boardPieces[col+1][row-1].color) {
               colorEqual = false;
           }
           //size
           //solidity
           //shape
       }
   }





    CURRENT COMPLETED

    public boolean ClaimVictoryAction(QuartoClaimVictoryAction action) {
        if (action instanceof QuartoClaimVictoryAction) {

            boolean colorEqual = true;
            boolean sizeEqual = true;
            boolean solidityEqual = true;
            boolean shapeEqual = true;

            //checking columns
            for (int col = 0; col < 4; col++) {
                //Check each piece in the column with the first one in that column.
                for (int row = 0; row < 3; row++) {
                    // compares color
                    if (boardPieces[col][row].color != boardPieces[col][row + 1].color)
                    {
                        colorEqual = false;
                    }

                    //compares size
                    if (boardPieces[col][row].size != boardPieces[col][row + 1].size)
                    {
                        sizeEqual = false;
                    }

                    //compares solidity
                    if (boardPieces[col][row].solidity != boardPieces[col][row + 1].solidity)
                    {
                        solidityEqual = false;
                    }

                    //compares shape
                    if (boardPieces[col][row].shape != boardPieces[col][row + 1].shape)
                    {
                        shapeEqual = false;
                    }
                }

                //If the column we just checked has a Quarto then return. Otherwise check the next column.
                if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true)
                {
                    gameOver = true;
                    return true;
                }
            }


            //checking rows
            for (int row = 0; row < 4; row++) {
                for (int col = 0; col < 3; col++) {
                    //compares color
                    if (boardPieces[col][row].color != boardPieces[col + 1][row].color) {
                        colorEqual = false;
                    }

                    //compares size
                    if (boardPieces[col][row].size != boardPieces[col+1][row].size) {
                        sizeEqual = false;
                    }

                    //compares solidity
                    if (boardPieces[col][row].solidity != boardPieces[col+1][row].solidity) {
                        solidityEqual = false;
                    }

                    //compares shape
                    if (boardPieces[col][row].shape != boardPieces[col+1][row].shape) {
                        shapeEqual = false;
                    }
                }

                //If the row we just checked has a Quarto then return. Otherwise check the next row.
                if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true) {
                    gameOver = true;
                    return true;
                }
            }


            //checking cross - top left to bottom right
            for (int col = 0; col < 3; col++) {
                for (int row = 0; row < 3; row++) {
                    //checks (0,0) (1,1) (2,2) and (3,3)
                    if(row == col) {
                        //compares color
                        if (boardPieces[col][row].color != boardPieces[col + 1][row + 1].color) {
                            colorEqual = false;
                        }

                        //compares size
                        if (boardPieces[col][row].size != boardPieces[col + 1][row + 1].size) {
                            sizeEqual = false;
                        }

                        //compares solidity
                        if (boardPieces[col][row].solidity != boardPieces[col + 1][row + 1].solidity) {
                            solidityEqual = false;
                        }

                        //compares shape
                        if (boardPieces[col][row].shape != boardPieces[col + 1][row + 1].shape) {
                            shapeEqual = false;
                        }
                    }
                }

                //If the diagonal we just checked has a Quarto then return.
                if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true) {
                    gameOver = true;
                    return true;
                }
            }

            //Checking cross - top right to bottom left.
            //Holds the row value that corresponds to the column number for the next loop.
            int row = 0;

            for (int col = 3; col > 0; col--) {
                //checks (3,0) (2,1) (1,2) and (0,3)
                //compares color
                if (boardPieces[col][row].color != boardPieces[col - 1][row + 1].color) {
                    colorEqual = false;
                }

                //compares size
                if (boardPieces[col][row].size != boardPieces[col - 1][row + 1].size) {
                    sizeEqual = false;
                }

                //compares solidity
                if (boardPieces[col][row].solidity != boardPieces[col - 1][row + 1].solidity) {
                    solidityEqual = false;
                }

                //compares shape
                if (boardPieces[col][row].shape != boardPieces[col - 1][row + 1].shape) {
                    shapeEqual = false;
                }

                row++;
            }

            //If the diagonal we just checked has a Quarto then return.
            if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true) {
                gameOver = true;
                return true;
            }

        }
        return false;
    }

    NEW ALGORITHM:

    //If any of pieces in the ys don't match then this
                //value will be set to false.
                boolean colorEqual = true;
                boolean sizeEqual = true;
                boolean solidityEqual = true;
                boolean shapeEqual = true;

                //Loop through each x spot.
                for (int x = 0; x < 4; x++)
                {
                    //Loop through each y spot in that column.
                    for (int y = 0; y < 3; y++)
                    {

                        //If both board Pieces aren't null, compare them
                        if(boardPieces[x][y] != null && boardPieces[x][y+1] != null)
                        {
                            //If the color of is not equal then set colorEqual to false.
                            if (boardPieces[x][y].color != boardPieces[x][y + 1].color)
                                colorEqual = false;

                            //If the size is not equal then set sizeEqual to false.
                            if (boardPieces[x][y].size != boardPieces[x][y + 1].size)
                                sizeEqual = false;

                            //If the solidity is not equal then set solidityEqual to false.
                            if (boardPieces[x][y].solidity != boardPieces[x][y + 1].solidity)
                                solidityEqual = false;

                            //If the shape is not the same then set shapeEqual to false.
                            if (boardPieces[x][y].shape != boardPieces[x][y + 1].shape)
                                shapeEqual = false;
                        }
                        else
                        {
                           colorEqual = false;
                           shapeEqual = false;
                           solidityEqual = false;
                           sizeEqual = false;
                           break;
                        }
                    }


                    //If the column we just checked has a Quarto then return. Otherwise check the next column.
                    if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true)
                    {
                        gameOver = true;
                        return true;
                    }
                    else
                    {
                        colorEqual = true;
                        sizeEqual = true;
                        solidityEqual = true;
                        shapeEqual = true;
                    }
                }

                //Loop through to check the rows.
                for (int y = 0; y < 4; y++)
                {
                    for (int x = 0; x < 3; x++)
                    {

                         if(boardPieces[x][y] != null && boardPieces[x+1][y] != null)
                         {
                            //compares color
                            if (boardPieces[x][y].color != boardPieces[x + 1][y].color)
                                colorEqual = false;

                            //compares size
                            if (boardPieces[x][y].size != boardPieces[x + 1][y].size)
                                sizeEqual = false;

                            //compares solidity
                            if (boardPieces[x][y].solidity != boardPieces[x + 1][y].solidity)
                                solidityEqual = false;

                            //compares shape
                            if (boardPieces[x][y].shape != boardPieces[x + 1][y].shape)
                                shapeEqual = false;
                         }
                         else
                         {
                            colorEqual = true;
                            sizeEqual = true;
                            solidityEqual = true;
                            shapeEqual = true;
                            break;
                         }
                    }

                    //If the y we just checked has a Quarto then return. Otherwise check the next y.
                    if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true)
                    {
                        gameOver = true;
                        return true;
                    }
                    else
                    {
                        colorEqual = true;
                        sizeEqual = true;
                        solidityEqual = true;
                        shapeEqual = true;
                    }
                }

                //checking cross - top left to bottom right
                for (int x = 0; x < 3; x++)
                {
                    for (int y = 0; y < 3; y++)
                    {
                        //checks (0,0) (1,1) (2,2) and (3,3)
                        if(y == x && (boardPieces[x][y] != null && boardPieces[x+1][y+1] != null)) {
                            //compares color
                            if (boardPieces[x][y].color != boardPieces[x + 1][y + 1].color)
                                colorEqual = false;

                            //compares size
                            if (boardPieces[x][y].size != boardPieces[x + 1][y + 1].size)
                                sizeEqual = false;

                            //compares solidity
                            if (boardPieces[x][y].solidity != boardPieces[x + 1][y + 1].solidity)
                                solidityEqual = false;

                            //compares shape
                            if (boardPieces[x][y].shape != boardPieces[x + 1][y + 1].shape)
                                shapeEqual = false;
                        }
                        else
                        {
                            colorEqual = false;
                            shapeEqual = false;
                            solidityEqual = false;
                            sizeEqual = false;
                            break;
                        }
                    }



                    //If the diagonal we just checked has a Quarto then return.
                    if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true) {
                        gameOver = true;
                        return true;
                    }
                    else
                    {
                        colorEqual = true;
                        sizeEqual = true;
                        solidityEqual = true;
                        shapeEqual = true;
                    }
                }

                //Checking cross - top right to bottom left.
                //Holds the y value that corresponds to the x number for the next loop.
                colorEqual = true;
                sizeEqual = true;
                solidityEqual = true;
                shapeEqual = true;

                for (int x = 3; x > 0; x--)
                {
                    //Checks (3,0) with (2,1) then (2,1) with (1,2) then (1,2) with (0,3).
                    //Holds the y-value.
                    int y = 0;

                    //Check if the pieces exist.
                    if(boardPieces[x][y] != null || boardPieces[x-1][y+1] != null)
                    {
                        //Check color.
                        if (boardPieces[x][y].color != boardPieces[x - 1][y + 1].color)
                            colorEqual = false;

                        //compares size
                        if (boardPieces[x][y].size != boardPieces[x - 1][y + 1].size)
                            sizeEqual = false;

                        //compares solidity
                        if (boardPieces[x][y].solidity != boardPieces[x - 1][y + 1].solidity)
                            solidityEqual = false;

                        //compares shape
                        if (boardPieces[x][y].shape != boardPieces[x - 1][y + 1].shape)
                            shapeEqual = false;

                        y++;
                    }
                    else
                    {
                        colorEqual = false;
                        shapeEqual = false;
                        solidityEqual = false;
                        sizeEqual = false;
                        break;
                    }
                }

                //If the diagonal we just checked has a Quarto then return.
                if (colorEqual == true || sizeEqual == true || solidityEqual == true || shapeEqual == true) {
                    gameOver = true;
                    return true;
                }


            return false;
